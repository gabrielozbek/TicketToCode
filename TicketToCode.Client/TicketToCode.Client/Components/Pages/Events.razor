@page "/events"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Kommande evenemang</h3>

@if (events == null)
{
    <p>Laddar...</p>
}
else if (events.Count == 0)
{
    <p>Inga evenemang hittades.</p>
}
else
{
    <ul>
        @foreach (var e in events)
        {
            <li>
                <strong>@e.name</strong><br />
                @e.description<br />
                Typ: @e.eventType<br />
                @e.startTime.ToString("g") – @e.endTime.ToString("g")<br />
                Max: @e.maxAttendees<br />
                <button @onclick="() => BookEvent(e.id)">Boka biljett</button>
            </li>
        }
    </ul>
}

@code {
    private List<Event>? events;

    protected override async Task OnInitializedAsync()
    {
        events = await Http.GetFromJsonAsync<List<Event>>("https://localhost:7206/api/events");
    }

    async Task BookEvent(int eventId)
    {
        Console.WriteLine("Knappen klickades!"); // debug

        var response = await Http.PostAsJsonAsync("https://localhost:7206/api/bookings", new { EventId = eventId });

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Bokning lyckades!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Något gick fel!");
        }
    }

    public class Event
    {
        public int id { get; set; }
        public string name { get; set; } = "";
        public string description { get; set; } = "";
        public string eventType { get; set; } = "";
        public DateTime startTime { get; set; }
        public DateTime endTime { get; set; }
        public int maxAttendees { get; set; }
    }
}
