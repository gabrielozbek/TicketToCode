@page "/events"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Kommande evenemang</h3>

@if (eventList == null)
{
    <p>Laddar evenemang...</p>
}
else if (eventList.Count == 0)
{
    <p>Inga evenemang hittades.</p>
}
else
{
    <ul>
        @foreach (var eventItem in eventList)
        {
            <li>
                <strong>@eventItem.Name</strong><br />
                @eventItem.Description<br />
                Typ: @eventItem.EventType<br />
                @eventItem.StartTime.ToString("g") – @eventItem.EndTime.ToString("g")<br />
                Max antal deltagare: @eventItem.MaxAttendees<br />
                <button @onclick="() => BookTicket(eventItem.Id)">Boka biljett</button>
            </li>
        }
    </ul>
}

@code {
    private List<EventDto>? eventList;

    /// <summary>
    /// Hämtar alla evenemang från API när komponenten laddas.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        eventList = await Http.GetFromJsonAsync<List<EventDto>>("https://localhost:7206/api/events");
    }

    /// <summary>
    /// Skickar en bokningsförfrågan till backend för det valda evenemanget.
    /// </summary>
    /// <param name="eventId">ID för det evenemang som användaren vill boka.</param>
    private async Task BookTicket(int eventId)
    {
        Console.WriteLine($"Boka-knappen klickades för Event ID: {eventId}");

        // Tillfällig användar-ID tills riktig autentisering finns
        var bookingRequest = new
        {
            EventId = eventId,
            UserId = 1
        };

        // Skickar POST-förfrågan till backend
        var response = await Http.PostAsJsonAsync("https://localhost:7206/api/bookings", bookingRequest);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Bokningen lyckades!");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Bokningen misslyckades:\n{errorMessage}");
        }
    }

    /// <summary>
    /// DTO-modell för att representera ett evenemang från backend.
    /// </summary>
    public class EventDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string EventType { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int MaxAttendees { get; set; }
    }
}
